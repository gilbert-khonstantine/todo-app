{"version":3,"sources":["components/utils.js","components/todo-list.component.js","components/create-todo.component.js","components/edit-todo.component.js","components/dashboard.component.js","App.js","serviceWorker.js","index.js"],"names":["getCurrentDate","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","ToDo","props","className","todo","completed","taskName","description","diffDays","deadline","calculateDeadline","priority","to","_id","onClick","e","preventDefault","axios","delete","href","ToDoList","state","todos","get","then","res","setState","data","catch","err","console","log","this","map","currentToDo","i","key","getToDoList","Component","CreateToDo","OnChangeName","bind","OnChangeDeadline","OnChangePriority","OnChangeDescription","handleSubmit","event","target","value","post","style","marginTop","onSubmit","type","onChange","name","checked","EditToDo","onChangeTodoCompleted","match","params","id","history","push","htmlFor","getDaysInMonth","Dashboard","onChangeMonth","getData","taskFreq","selectedTodo","length","parseInt","temp","j","days","Array","keys","x","freq","xLabels","yValues","width","height","options","fillColor","strokeColor","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.92f02f74.chunk.js","sourcesContent":["export function getCurrentDate(separator = '-') {\n\n    let newDate = new Date()\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n\n    return `${year}${separator}${month < 10 ? `0${month}` : `${month}`}${separator}${date < 10 ? `0${date}` : `${date}`}`\n}","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { Link } from \"react-router-dom\";\nimport { getCurrentDate } from './utils'\n\nfunction ToDo(props) {\n    function onDelete(e) {\n        e.preventDefault();\n        axios.delete(\"http://localhost:4000/remove/\" + props.todo._id)\n    }\n\n    function calculateDeadline() {\n        let diffDays = (new Date(props.todo.deadline) - new Date(getCurrentDate())) / (1000 * 60 * 60 * 24)\n        if (diffDays <= 2 && diffDays > 0) {\n            return props.todo.deadline + `\\t(${diffDays} days left)`\n        }\n        else if (diffDays === 0) {\n            return \"Today is the Deadline !!!\"\n        }\n        else {\n            return props.todo.deadline\n        }\n    }\n    return (<tr>\n        <td className={props.todo.completed ? 'completed' : \"\"}>{props.todo.taskName}</td>\n        <td className={props.todo.completed ? 'completed' : \"\"}>{props.todo.description}</td>\n        <td className={props.todo.completed ? 'completed' : \"\"}>{calculateDeadline()}</td>\n        <td className={props.todo.completed ? 'completed' : \"\"}>{props.todo.priority}</td>\n        <td>\n            <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\n            &emsp;\n            <a onClick={onDelete} href={\"/\"}>Remove</a>\n        </td>\n    </tr>)\n}\n\nexport default class ToDoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { todos: [] }\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/')\n            .then((res) => {\n                this.setState({ todos: res.data })\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    componentDidUpdate() {\n        axios.get('http://localhost:4000/')\n            .then((res) => {\n                this.setState({ todos: res.data })\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    getToDoList() {\n        return this.state.todos.map(function (currentToDo, i) {\n            return <ToDo todo={currentToDo} key={i} />\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2> To Do List </h2>\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Task Name</th>\n                            <th>Description</th>\n                            <th>Deadline</th>\n                            <th>Priority</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.getToDoList()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class CreateToDo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.OnChangeName = this.OnChangeName.bind(this);\n        this.OnChangeDeadline = this.OnChangeDeadline.bind(this);\n        this.OnChangePriority = this.OnChangePriority.bind(this);\n        this.OnChangeDescription = this.OnChangeDescription.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            taskName: \"\",\n            deadline: \"\",\n            description: \"\",\n            priority: \"\",\n            completed: false,\n        };\n    }\n\n    OnChangeName(event) {\n        this.setState({\n            taskName: event.target.value\n        });\n    }\n\n    OnChangePriority(event) {\n        this.setState({\n            priority: event.target.value\n        });\n    }\n    OnChangeDescription(event) {\n        this.setState({\n            description: event.target.value\n        });\n    }\n    OnChangeDeadline(event) {\n        this.setState({\n            deadline: event.target.value\n        })\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n\n        console.log(`Form submitted:`);\n        console.log(`Todo Description: ${this.state.taskName}`);\n        console.log(`Todo Desc: ${this.state.description}`);\n        console.log(`Todo Deadline: ${this.state.deadline}`);\n        console.log(`Todo Priority: ${this.state.priority}`);\n\n        axios.post('http://localhost:4000/add', this.state)\n            .then((res) => {\n                console.log(\"POST Request sent!\")\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n\n        this.setState({\n            taskName: \"\",\n            deadline: \"\",\n            description: \"\",\n            priority: \"\",\n            completed: false,\n        });\n\n    }\n\n    render() {\n        return (\n            <div style={{ marginTop: 10 }}>\n                <h1> Create Your Task</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label>Task Name</label>\n                        <input type=\"text\" className=\"form-control\" value={this.state.taskName} onChange={this.OnChangeName} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Deadline</label>\n                        <input type=\"date\" className=\"form-control\" value={this.state.deadline} onChange={this.OnChangeDeadline} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Description</label>\n                        <input type=\"text\" className=\"form-control\" value={this.state.description} onChange={this.OnChangeDescription} />\n                    </div>\n                    <div> Priority </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"high\" name=\"priorityOptions\" checked={this.state.priority === \"high\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            High Piority\n  </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"medium\" name=\"priorityOptions\" checked={this.state.priority === \"medium\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            Medium Piority\n  </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"low\" name=\"priorityOptions\" checked={this.state.priority === \"low\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            Low Piority\n  </label>\n                    </div>\n                    <div>\n                        <input type=\"submit\" className=\"btn btn-primary\" value=\"Create To Do\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class EditToDo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.OnChangeName = this.OnChangeName.bind(this);\n        this.OnChangeDeadline = this.OnChangeDeadline.bind(this);\n        this.OnChangePriority = this.OnChangePriority.bind(this);\n        this.OnChangeDescription = this.OnChangeDescription.bind(this);\n        this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            taskName: \"\",\n            deadline: \"\",\n            description: \"\",\n            priority: \"\",\n            completed: false,\n        };\n    }\n\n    OnChangeName(event) {\n        this.setState({\n            taskName: event.target.value\n        });\n    }\n\n    OnChangePriority(event) {\n        this.setState({\n            priority: event.target.value\n        });\n    }\n    OnChangeDescription(event) {\n        this.setState({\n            description: event.target.value\n        });\n    }\n    OnChangeDeadline(event) {\n        this.setState({\n            deadline: event.target.value\n        })\n    }\n\n    onChangeTodoCompleted(event) {\n        console.log(this.state)\n        this.setState({\n            completed: !this.state.completed\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        console.log(`Form submitted:`);\n        console.log(`Todo Description: ${this.state.taskName}`);\n        console.log(`Todo Desc: ${this.state.description}`);\n        console.log(`Todo Deadline: ${this.state.deadline}`);\n        console.log(`Todo Priority: ${this.state.priority}`);\n        console.log(`Todo completed: ${this.state.completed}`);\n\n        axios.post('http://localhost:4000/update/' + this.props.match.params.id, this.state)\n            .then((res) => {\n                console.log(\"POST Request Update sent!\")\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.props.history.push('/');\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/' + this.props.match.params.id)\n            .then((res) => {\n                this.setState({\n                    taskName: res.data.taskName,\n                    deadline: res.data.deadline,\n                    description: res.data.description,\n                    priority: res.data.priority,\n                    completed: res.data.completed\n                })\n                console.log(this.state)\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n    render() {\n        return (\n            <div>\n                <h2>Edit To Do List</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label>Task Name</label>\n                        <input type=\"text\" className=\"form-control\" value={this.state.taskName} onChange={this.OnChangeName} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Deadline</label>\n                        <input type=\"date\" className=\" form-control\" value={this.state.deadline} onChange={this.OnChangeDeadline} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Description</label>\n                        <input type=\"text\" className=\"form-control\" value={this.state.description} onChange={this.OnChangeDescription} />\n                    </div>\n                    <div> Priority </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"high\" name=\"priorityOptions\" checked={this.state.priority === \"high\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            High Piority\n  </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"medium\" name=\"priorityOptions\" checked={this.state.priority === \"medium\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            Medium Piority\n  </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" value=\"low\" name=\"priorityOptions\" checked={this.state.priority === \"low\"} onChange={this.OnChangePriority} />\n                        <label className=\"form-check-label\">\n                            Low Piority\n  </label>\n                    </div>\n\n                    <div className=\"form-check\">\n                        <input className=\"form-check-input\"\n                            id=\"completedCheckbox\"\n                            type=\"checkbox\"\n                            name=\"completedCheckbox\"\n                            onChange={this.onChangeTodoCompleted}\n                            checked={this.state.completed}\n                            value={this.state.completed}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                            Completed\n                        </label>\n                    </div>\n\n\n                    <div>\n                        <input type=\"submit\" className=\"btn btn-primary\" value=\"Update To Do\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Histogram from 'react-chart-histogram';\nimport { getCurrentDate } from './utils'\n\n//to get the number of days in a month\nconst getDaysInMonth = function (month, year) {\n    return new Date(year, month, 0).getDate();\n};\n\nexport default class Dashboard extends Component {\n    constructor(props) {\n        super(props)\n        this.onChangeMonth = this.onChangeMonth.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getData = this.getData.bind(this);\n        this.state = {\n            //default month is this month.\n            month: new Date(getCurrentDate()).getMonth() + 1,\n            year: new Date(getCurrentDate()).getFullYear(),\n            todos: [],\n            taskFreq: []\n        }\n    }\n\n    getData() {\n        axios.get(\"http://localhost:4000/\")\n            .then((res) => {\n                let selectedTodo = []\n                for (let i = 0; i < res.data.length; i++) {\n                    if (res.data[i].deadline.length > 0) {\n                        if (new Date(res.data[i].deadline).getMonth() + 1 === parseInt(this.state.month)) {\n                            selectedTodo.push(res.data[i])\n                        }\n                    }\n                }\n                this.setState({\n                    todos: selectedTodo,\n                })\n                let taskFreq = []\n                for (let i = 1; i <= getDaysInMonth(this.state.month, this.state.year); i++) {\n                    let temp = 0\n                    for (let j = 0; j < this.state.todos.length; j++) {\n                        if (new Date(this.state.todos[j].deadline).getDate() === i) {\n                            temp++;\n                        }\n                    }\n                    taskFreq.push(temp);\n                }\n                this.setState({\n                    taskFreq: taskFreq\n                })\n            })\n    }\n\n    //this is where the query works manually\n    componentDidMount() {\n        this.getData()\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.getData()\n    }\n\n    onChangeMonth(event) {\n        console.log(event.target.value)\n        this.setState({\n            month: new Date(event.target.value).getMonth() + 1,\n            year: new Date(event.target.value).getFullYear()\n        })\n\n    }\n\n    render() {\n        // this is the days\n        const days = [...Array(getDaysInMonth(this.state.month, this.state.year)).keys()].map(function (x) { return x + 1 });\n        // this is the number of task daily\n        const freq = this.state.taskFreq\n        const options = { fillColor: '#FFFFFF', strokeColor: '#0000FF' };\n        return (\n            <div>\n                <h3>Task Frequency Dashboard</h3>\n                <div>\n                    <h4> Month: </h4>\n                    <form onSubmit={this.handleSubmit}>\n                        <input type=\"month\" onChange={this.onChangeMonth} value={this.state.year + \"-\" + (this.state.month < 10 ? \"0\" + this.state.month : this.state.month)} />\n                        <br />\n                        <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\" />\n                    </form>\n                </div>\n                {/* checked={this.state.completed}\n                            value={this.state.completed}/> */}\n                <Histogram\n                    xLabels={days}\n                    yValues={freq}\n                    width='800'\n                    height='500'\n                    options={options}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport ToDoList from \"./components/todo-list.component\";\nimport CreateToDo from \"./components/create-todo.component\";\nimport EditToDo from \"./components/edit-todo.component\";\nimport Dashboard from './components/dashboard.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\" >\n            <a href=\"/dashboard\" className=\"navbar-brand\">Mern To-Do App</a>\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">To Do List</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/create\">Create New Task</a>\n              </li>\n            </ul>\n          </nav>\n          {/* this is how we connect the path with each function */}\n          <Route path=\"/\" exact component={ToDoList} />\n          <Route path=\"/edit/:id\" component={EditToDo} />\n          <Route path=\"/create\" component={CreateToDo} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n        </div>\n      </Router >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}